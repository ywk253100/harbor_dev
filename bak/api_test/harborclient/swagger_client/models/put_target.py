# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'endpoint': 'str',
        'username': 'str',
        'password': 'str',
        'insecure': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'endpoint': 'endpoint',
        'username': 'username',
        'password': 'password',
        'insecure': 'insecure'
    }

    def __init__(self, name=None, endpoint=None, username=None, password=None, insecure=None):  # noqa: E501
        """PutTarget - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._endpoint = None
        self._username = None
        self._password = None
        self._insecure = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if endpoint is not None:
            self.endpoint = endpoint
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if insecure is not None:
            self.insecure = insecure

    @property
    def name(self):
        """Gets the name of this PutTarget.  # noqa: E501

        The target name.  # noqa: E501

        :return: The name of this PutTarget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutTarget.

        The target name.  # noqa: E501

        :param name: The name of this PutTarget.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def endpoint(self):
        """Gets the endpoint of this PutTarget.  # noqa: E501

        The target address URL string.  # noqa: E501

        :return: The endpoint of this PutTarget.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this PutTarget.

        The target address URL string.  # noqa: E501

        :param endpoint: The endpoint of this PutTarget.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def username(self):
        """Gets the username of this PutTarget.  # noqa: E501

        The target server username.  # noqa: E501

        :return: The username of this PutTarget.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PutTarget.

        The target server username.  # noqa: E501

        :param username: The username of this PutTarget.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this PutTarget.  # noqa: E501

        The target server password.  # noqa: E501

        :return: The password of this PutTarget.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PutTarget.

        The target server password.  # noqa: E501

        :param password: The password of this PutTarget.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def insecure(self):
        """Gets the insecure of this PutTarget.  # noqa: E501

        Whether or not the certificate will be verified when Harbor tries to access the server.  # noqa: E501

        :return: The insecure of this PutTarget.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this PutTarget.

        Whether or not the certificate will be verified when Harbor tries to access the server.  # noqa: E501

        :param insecure: The insecure of this PutTarget.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
