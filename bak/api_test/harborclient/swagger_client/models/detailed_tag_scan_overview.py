# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.detailed_tag_scan_overview_components import DetailedTagScanOverviewComponents  # noqa: F401,E501


class DetailedTagScanOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digest': 'str',
        'scan_status': 'str',
        'job_id': 'int',
        'severity': 'int',
        'details_key': 'str',
        'components': 'DetailedTagScanOverviewComponents'
    }

    attribute_map = {
        'digest': 'digest',
        'scan_status': 'scan_status',
        'job_id': 'job_id',
        'severity': 'severity',
        'details_key': 'details_key',
        'components': 'components'
    }

    def __init__(self, digest=None, scan_status=None, job_id=None, severity=None, details_key=None, components=None):  # noqa: E501
        """DetailedTagScanOverview - a model defined in Swagger"""  # noqa: E501

        self._digest = None
        self._scan_status = None
        self._job_id = None
        self._severity = None
        self._details_key = None
        self._components = None
        self.discriminator = None

        if digest is not None:
            self.digest = digest
        if scan_status is not None:
            self.scan_status = scan_status
        if job_id is not None:
            self.job_id = job_id
        if severity is not None:
            self.severity = severity
        if details_key is not None:
            self.details_key = details_key
        if components is not None:
            self.components = components

    @property
    def digest(self):
        """Gets the digest of this DetailedTagScanOverview.  # noqa: E501

        The digest of the image.  # noqa: E501

        :return: The digest of this DetailedTagScanOverview.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this DetailedTagScanOverview.

        The digest of the image.  # noqa: E501

        :param digest: The digest of this DetailedTagScanOverview.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def scan_status(self):
        """Gets the scan_status of this DetailedTagScanOverview.  # noqa: E501

        The status of the scan job, it can be \"pendnig\", \"running\", \"finished\", \"error\".  # noqa: E501

        :return: The scan_status of this DetailedTagScanOverview.  # noqa: E501
        :rtype: str
        """
        return self._scan_status

    @scan_status.setter
    def scan_status(self, scan_status):
        """Sets the scan_status of this DetailedTagScanOverview.

        The status of the scan job, it can be \"pendnig\", \"running\", \"finished\", \"error\".  # noqa: E501

        :param scan_status: The scan_status of this DetailedTagScanOverview.  # noqa: E501
        :type: str
        """

        self._scan_status = scan_status

    @property
    def job_id(self):
        """Gets the job_id of this DetailedTagScanOverview.  # noqa: E501

        The ID of the job on jobservice to scan the image.  # noqa: E501

        :return: The job_id of this DetailedTagScanOverview.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DetailedTagScanOverview.

        The ID of the job on jobservice to scan the image.  # noqa: E501

        :param job_id: The job_id of this DetailedTagScanOverview.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def severity(self):
        """Gets the severity of this DetailedTagScanOverview.  # noqa: E501

        0-Not scanned, 1-Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High  # noqa: E501

        :return: The severity of this DetailedTagScanOverview.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DetailedTagScanOverview.

        0-Not scanned, 1-Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High  # noqa: E501

        :param severity: The severity of this DetailedTagScanOverview.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def details_key(self):
        """Gets the details_key of this DetailedTagScanOverview.  # noqa: E501

        The top layer name of this image in Clair, this is for calling Clair API to get the vulnerability list of this image.  # noqa: E501

        :return: The details_key of this DetailedTagScanOverview.  # noqa: E501
        :rtype: str
        """
        return self._details_key

    @details_key.setter
    def details_key(self, details_key):
        """Sets the details_key of this DetailedTagScanOverview.

        The top layer name of this image in Clair, this is for calling Clair API to get the vulnerability list of this image.  # noqa: E501

        :param details_key: The details_key of this DetailedTagScanOverview.  # noqa: E501
        :type: str
        """

        self._details_key = details_key

    @property
    def components(self):
        """Gets the components of this DetailedTagScanOverview.  # noqa: E501


        :return: The components of this DetailedTagScanOverview.  # noqa: E501
        :rtype: DetailedTagScanOverviewComponents
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this DetailedTagScanOverview.


        :param components: The components of this DetailedTagScanOverview.  # noqa: E501
        :type: DetailedTagScanOverviewComponents
        """

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedTagScanOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
