# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.project import Project  # noqa: F401,E501
from swagger_client.models.rep_filter import RepFilter  # noqa: F401,E501
from swagger_client.models.rep_target import RepTarget  # noqa: F401,E501
from swagger_client.models.rep_trigger import RepTrigger  # noqa: F401,E501


class RepPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'projects': 'list[Project]',
        'targets': 'list[RepTarget]',
        'trigger': 'RepTrigger',
        'filters': 'list[RepFilter]',
        'replicate_existing_image_now': 'bool',
        'replicate_deletion': 'bool',
        'creation_time': 'str',
        'update_time': 'str',
        'error_job_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'projects': 'projects',
        'targets': 'targets',
        'trigger': 'trigger',
        'filters': 'filters',
        'replicate_existing_image_now': 'replicate_existing_image_now',
        'replicate_deletion': 'replicate_deletion',
        'creation_time': 'creation_time',
        'update_time': 'update_time',
        'error_job_count': 'error_job_count'
    }

    def __init__(self, id=None, name=None, description=None, projects=None, targets=None, trigger=None, filters=None, replicate_existing_image_now=None, replicate_deletion=None, creation_time=None, update_time=None, error_job_count=None):  # noqa: E501
        """RepPolicy - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._projects = None
        self._targets = None
        self._trigger = None
        self._filters = None
        self._replicate_existing_image_now = None
        self._replicate_deletion = None
        self._creation_time = None
        self._update_time = None
        self._error_job_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if projects is not None:
            self.projects = projects
        if targets is not None:
            self.targets = targets
        if trigger is not None:
            self.trigger = trigger
        if filters is not None:
            self.filters = filters
        if replicate_existing_image_now is not None:
            self.replicate_existing_image_now = replicate_existing_image_now
        if replicate_deletion is not None:
            self.replicate_deletion = replicate_deletion
        if creation_time is not None:
            self.creation_time = creation_time
        if update_time is not None:
            self.update_time = update_time
        if error_job_count is not None:
            self.error_job_count = error_job_count

    @property
    def id(self):
        """Gets the id of this RepPolicy.  # noqa: E501

        The policy ID.  # noqa: E501

        :return: The id of this RepPolicy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepPolicy.

        The policy ID.  # noqa: E501

        :param id: The id of this RepPolicy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RepPolicy.  # noqa: E501

        The policy name.  # noqa: E501

        :return: The name of this RepPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepPolicy.

        The policy name.  # noqa: E501

        :param name: The name of this RepPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RepPolicy.  # noqa: E501

        The description of the policy.  # noqa: E501

        :return: The description of this RepPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepPolicy.

        The description of the policy.  # noqa: E501

        :param description: The description of this RepPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def projects(self):
        """Gets the projects of this RepPolicy.  # noqa: E501

        The project list that the policy applys to.  # noqa: E501

        :return: The projects of this RepPolicy.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this RepPolicy.

        The project list that the policy applys to.  # noqa: E501

        :param projects: The projects of this RepPolicy.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def targets(self):
        """Gets the targets of this RepPolicy.  # noqa: E501

        The target list.  # noqa: E501

        :return: The targets of this RepPolicy.  # noqa: E501
        :rtype: list[RepTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RepPolicy.

        The target list.  # noqa: E501

        :param targets: The targets of this RepPolicy.  # noqa: E501
        :type: list[RepTarget]
        """

        self._targets = targets

    @property
    def trigger(self):
        """Gets the trigger of this RepPolicy.  # noqa: E501


        :return: The trigger of this RepPolicy.  # noqa: E501
        :rtype: RepTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this RepPolicy.


        :param trigger: The trigger of this RepPolicy.  # noqa: E501
        :type: RepTrigger
        """

        self._trigger = trigger

    @property
    def filters(self):
        """Gets the filters of this RepPolicy.  # noqa: E501

        The replication policy filter array.  # noqa: E501

        :return: The filters of this RepPolicy.  # noqa: E501
        :rtype: list[RepFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RepPolicy.

        The replication policy filter array.  # noqa: E501

        :param filters: The filters of this RepPolicy.  # noqa: E501
        :type: list[RepFilter]
        """

        self._filters = filters

    @property
    def replicate_existing_image_now(self):
        """Gets the replicate_existing_image_now of this RepPolicy.  # noqa: E501

        Whether to replicate the existing images now.  # noqa: E501

        :return: The replicate_existing_image_now of this RepPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._replicate_existing_image_now

    @replicate_existing_image_now.setter
    def replicate_existing_image_now(self, replicate_existing_image_now):
        """Sets the replicate_existing_image_now of this RepPolicy.

        Whether to replicate the existing images now.  # noqa: E501

        :param replicate_existing_image_now: The replicate_existing_image_now of this RepPolicy.  # noqa: E501
        :type: bool
        """

        self._replicate_existing_image_now = replicate_existing_image_now

    @property
    def replicate_deletion(self):
        """Gets the replicate_deletion of this RepPolicy.  # noqa: E501

        Whether to replicate the deletion operation.  # noqa: E501

        :return: The replicate_deletion of this RepPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._replicate_deletion

    @replicate_deletion.setter
    def replicate_deletion(self, replicate_deletion):
        """Sets the replicate_deletion of this RepPolicy.

        Whether to replicate the deletion operation.  # noqa: E501

        :param replicate_deletion: The replicate_deletion of this RepPolicy.  # noqa: E501
        :type: bool
        """

        self._replicate_deletion = replicate_deletion

    @property
    def creation_time(self):
        """Gets the creation_time of this RepPolicy.  # noqa: E501

        The create time of the policy.  # noqa: E501

        :return: The creation_time of this RepPolicy.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this RepPolicy.

        The create time of the policy.  # noqa: E501

        :param creation_time: The creation_time of this RepPolicy.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this RepPolicy.  # noqa: E501

        The update time of the policy.  # noqa: E501

        :return: The update_time of this RepPolicy.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this RepPolicy.

        The update time of the policy.  # noqa: E501

        :param update_time: The update_time of this RepPolicy.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def error_job_count(self):
        """Gets the error_job_count of this RepPolicy.  # noqa: E501

        The error job count number for the policy.  # noqa: E501

        :return: The error_job_count of this RepPolicy.  # noqa: E501
        :rtype: int
        """
        return self._error_job_count

    @error_job_count.setter
    def error_job_count(self, error_job_count):
        """Sets the error_job_count of this RepPolicy.

        The error job count number for the policy.  # noqa: E501

        :param error_job_count: The error_job_count of this RepPolicy.  # noqa: E501
        :type: int
        """

        self._error_job_count = error_job_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
