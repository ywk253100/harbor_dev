# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.configurations_scan_all_policy import ConfigurationsScanAllPolicy  # noqa: F401,E501


class ConfigurationsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ldap_scope': 'int',
        'ldap_search_dn': 'str',
        'scan_all_policy': 'ConfigurationsScanAllPolicy'
    }

    attribute_map = {
        'ldap_scope': 'ldap_scope',
        'ldap_search_dn': 'ldap_search_dn',
        'scan_all_policy': 'scan_all_policy'
    }

    def __init__(self, ldap_scope=None, ldap_search_dn=None, scan_all_policy=None):  # noqa: E501
        """ConfigurationsResponse - a model defined in Swagger"""  # noqa: E501

        self._ldap_scope = None
        self._ldap_search_dn = None
        self._scan_all_policy = None
        self.discriminator = None

        if ldap_scope is not None:
            self.ldap_scope = ldap_scope
        if ldap_search_dn is not None:
            self.ldap_search_dn = ldap_search_dn
        if scan_all_policy is not None:
            self.scan_all_policy = scan_all_policy

    @property
    def ldap_scope(self):
        """Gets the ldap_scope of this ConfigurationsResponse.  # noqa: E501

        0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE  # noqa: E501

        :return: The ldap_scope of this ConfigurationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._ldap_scope

    @ldap_scope.setter
    def ldap_scope(self, ldap_scope):
        """Sets the ldap_scope of this ConfigurationsResponse.

        0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE  # noqa: E501

        :param ldap_scope: The ldap_scope of this ConfigurationsResponse.  # noqa: E501
        :type: int
        """

        self._ldap_scope = ldap_scope

    @property
    def ldap_search_dn(self):
        """Gets the ldap_search_dn of this ConfigurationsResponse.  # noqa: E501

        The DN of the user to do the search.  # noqa: E501

        :return: The ldap_search_dn of this ConfigurationsResponse.  # noqa: E501
        :rtype: str
        """
        return self._ldap_search_dn

    @ldap_search_dn.setter
    def ldap_search_dn(self, ldap_search_dn):
        """Sets the ldap_search_dn of this ConfigurationsResponse.

        The DN of the user to do the search.  # noqa: E501

        :param ldap_search_dn: The ldap_search_dn of this ConfigurationsResponse.  # noqa: E501
        :type: str
        """

        self._ldap_search_dn = ldap_search_dn

    @property
    def scan_all_policy(self):
        """Gets the scan_all_policy of this ConfigurationsResponse.  # noqa: E501


        :return: The scan_all_policy of this ConfigurationsResponse.  # noqa: E501
        :rtype: ConfigurationsScanAllPolicy
        """
        return self._scan_all_policy

    @scan_all_policy.setter
    def scan_all_policy(self, scan_all_policy):
        """Sets the scan_all_policy of this ConfigurationsResponse.


        :param scan_all_policy: The scan_all_policy of this ConfigurationsResponse.  # noqa: E501
        :type: ConfigurationsScanAllPolicy
        """

        self._scan_all_policy = scan_all_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
