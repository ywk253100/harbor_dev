# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.schedule_param import ScheduleParam  # noqa: F401,E501


class RepTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'schedule_param': 'ScheduleParam'
    }

    attribute_map = {
        'kind': 'kind',
        'schedule_param': 'schedule_param'
    }

    def __init__(self, kind=None, schedule_param=None):  # noqa: E501
        """RepTrigger - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._schedule_param = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if schedule_param is not None:
            self.schedule_param = schedule_param

    @property
    def kind(self):
        """Gets the kind of this RepTrigger.  # noqa: E501

        The replication policy trigger kind. The valid values are manual, immediate and schedule.  # noqa: E501

        :return: The kind of this RepTrigger.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RepTrigger.

        The replication policy trigger kind. The valid values are manual, immediate and schedule.  # noqa: E501

        :param kind: The kind of this RepTrigger.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def schedule_param(self):
        """Gets the schedule_param of this RepTrigger.  # noqa: E501


        :return: The schedule_param of this RepTrigger.  # noqa: E501
        :rtype: ScheduleParam
        """
        return self._schedule_param

    @schedule_param.setter
    def schedule_param(self, schedule_param):
        """Sets the schedule_param of this RepTrigger.


        :param schedule_param: The schedule_param of this RepTrigger.  # noqa: E501
        :type: ScheduleParam
        """

        self._schedule_param = schedule_param

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
